{"version":3,"sources":["components/Note/Note.js","components/NoteForm/NoteForm.js","config/config.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteContent","noteId","id","removeNote","_this2","react_default","a","createElement","className","onClick","handleRemove","Component","NoteForm","addNote","bind","assertThisInitialized","textInput","value","focus","ref","input","placeholder","type","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","note","db","push","set","child","remove","state","notes","app","firebase","initializeApp","database","on","snap","key","val","setState","i","length","splice","_this3","map","Note_Note_Note","NoteForm_NoteForm_NoteForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8b6a91a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Note.css'\n\nexport default class Note extends Component {\n    constructor(props) {\n        super()\n        this.noteContent = props.noteContent\n        this.noteId = props.noteId\n    }\n\n    handleRemove( id ) { \n        this.props.removeNote( id)\n     }\n\n    render() {\n        return (\n            <div className='Note'>\n                <span onClick={ () => this.handleRemove( this.noteId ) } >&times;</span>\n                <p>{ this.noteContent }</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './NoteForm.css'\n\nexport default class NoteForm extends Component { \n    constructor(){ \n        super()\n        this.addNote = this.addNote.bind( this )\n     }\n\n     addNote(){ \n         this.props.addNote( this.textInput.value )\n         this.textInput.value = ''\n         this.textInput.focus()\n      }\n\n     render(){ \n         return( \n             <div className='NoteForm'>\n                 <input ref={ input => { this.textInput = input } } placeholder='Write a Note' type='text' />\n                 <button onClick={ this.addNote } >\n                     Add Note\n                 </button>\n             </div>\n          )\n      }\n }","export const DB_CONFIG = { \n    apiKey: \"AIzaSyDDanQFiEKIjqlYhxqYc5VqvjR4JjSyx8I\",\n    authDomain: \"reactnotes-1782b.firebaseapp.com\",\n    databaseURL: \"https://reactnotes-1782b.firebaseio.com\",\n    projectId: \"reactnotes-1782b\",\n    storageBucket: \"\",\n    messagingSenderId: \"857908983380\",\n    appId: \"1:857908983380:web:24fc68181a91159e\"\n }","import React, { Component } from 'react';\nimport './App.css';\nimport Note from './components/Note/Note'\nimport NoteForm from './components/NoteForm/NoteForm'\nimport firebase from 'firebase'\nimport { DB_CONFIG } from './config/config'\n\nclass App extends Component{\n  constructor(){ \n    super()\n    this.state = { \n      notes: []\n     }\n     this.app = firebase.initializeApp( DB_CONFIG )\n     this.db = this.app.database().ref().child( 'notes' )\n   }\n\n   componentDidMount() {\n     const { notes } = this.state\n     this.db.on( 'child_added', snap => { \n       notes.push( { \n         noteId: snap.key,\n         noteContent: snap.val().noteContent\n        } )\n        this.setState( { notes } )\n      } )\n     this.db.on( 'child_removed', snap => { \n       for ( let i = 0; i < notes.length; i++ ){ \n         if ( notes[i].noteId = snap.key ){ \n           notes.splice( i,1 )\n          }\n        }\n        this.setState( { notes } )\n      } ) \n   }\n   \n\n   addNote = ( note ) => { \n   \n      this.db.push().set( { noteContent: note } )\n    }\n\n    removeNote = (noteId) => { \n      this.db.child( noteId ).remove()\n     }\n\n  render(){ \n    return (\n      <div className=\"notesContainer\">\n          <div className='notesHeader'>\n            <h1>React and Firebase App</h1>\n          </div>\n  \n          <div className='notesBody'>\n            <ul>\n              { this.state.notes.map( note => { \n                return( \n                  <Note noteContent={ note.noteContent } noteId={ note.noteId } key={ note.noteId } removeNote={ this.removeNote} />\n                 )\n               } ) }\n            </ul>\n          </div>\n          <div className='notesFooter'>\n               <NoteForm addNote={ this.addNote } />\n          </div>\n      </div>\n    );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}